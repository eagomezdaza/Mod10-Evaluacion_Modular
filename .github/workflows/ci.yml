# ============================================================================
# github-actions.yml — CI para Evaluación Modular
# Autor: John Gómez
# Fecha: 2025-09-25
# Descripción:
#   Workflow que instala dependencias, entrena el modelo,
#   levanta la API (Gunicorn) y corre los tests básicos contra la API.
#   Incluye espera activa por /health y logging para diagnóstico,
#   y un job de despliegue a Azure Container Apps SIN condiciones con secrets.
# ============================================================================

name: Evaluacion Modular CI

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "tests/**"
      - "docker/**"
      - "Makefile"
      - "requirements.txt"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PORT: 5000

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train model
        run: |
          python src/train_breast_cancer.py

      - name: Start API (Gunicorn, background)
        run: |
          export PYTHONPATH="$PWD"
          echo "PYTHONPATH=$PYTHONPATH"
          python -m gunicorn -w 2 -b 0.0.0.0:${PORT} src.app:app > api.log 2>&1 &
          echo $! > app.pid
          # Espera hasta 90s a que /health responda
          for i in $(seq 1 45); do
            if curl -fsS "http://127.0.0.1:${PORT}/health" >/dev/null 2>&1; then
              echo "API healthy en intento $i"
              exit 0
            fi
            if [ $((i % 5)) -eq 0 ]; then echo "--- api.log (tail) ---"; tail -n 20 api.log || true; fi
            echo "Esperando API... (intento $i)"
            sleep 2
          done
          echo "La API no alcanzó estado healthy a tiempo. Dump de logs:"
          echo "=== api.log (últimas 400 líneas) ==="
          tail -n 400 api.log || true
          exit 1

      - name: Run tests
        run: |
          set -e
          # Siempre prueba el endpoint explícitamente
          python tests/test_predict.py --base-url "http://127.0.0.1:${PORT}"
          # Si además tienes más tests con pytest, ejecútalos después (opcional)
          if [ -f "pytest.ini" ] || ( [ -d "tests" ] && ls tests/test_*.py >/dev/null 2>&1 ); then
            pytest -q || true
          fi

      - name: Mostrar logs de la API
        if: always()
        run: |
          echo "=== api.log (últimas 200 líneas) ==="
          tail -n 200 api.log || true

      - name: Detener API
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill "$(cat app.pid)" || true
            sleep 1
          fi

  deploy-azure:
    name: Deploy — Azure Container Apps
    needs: [ build-and-test ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    env:
      RG: rg-evalmod-aca
      LOCATION: eastus
      ENV_NAME: env-evalmod
      APP: evalmod-api
      IMAGE: em-api
      PORT: 5002
      MODEL_PATH: src/model/modelo_breast.pkl
      TAG: ${{ github.sha }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR (via az acr login)
        run: |
          az acr login -n "${{ secrets.ACR_NAME }}"
          docker build -f docker/Dockerfile -t "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE }}:${{ env.TAG }}" .
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE }}:${{ env.TAG }}"

      - name: Deploy to Azure Container Apps (script)
        env:
          LOCATION: ${{ env.LOCATION }}
          RG: ${{ env.RG }}
          ACR: ${{ secrets.ACR_NAME }}
          IMAGE: ${{ env.IMAGE }}
          TAG: ${{ env.TAG }}
          APP: ${{ env.APP }}
          ENV_NAME: ${{ env.ENV_NAME }}
          PORT: ${{ env.PORT }}
          MODEL_PATH: ${{ env.MODEL_PATH }}
          SKIP_BUILD: "1"
          DOCKERFILE: docker/Dockerfile
        run: |
          bash scripts/deploy_azure.sh

      - name: Mostrar URL pública
        run: |
          FQDN="$(az containerapp show -g '${{ env.RG }}' -n '${{ env.APP }}' --query properties.configuration.ingress.fqdn -o tsv || true)"
          echo "URL pública: https://${FQDN}"
