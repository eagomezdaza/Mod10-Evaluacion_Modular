name: Evaluacion Modular CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "tests/**"
      - "docker/**"
      - "Makefile"
      - "requirements.txt"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PORT: 5002
      MODEL_PATH: modelo_breast.pkl
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train model
        run: python src/train_breast_cancer.py

      - name: Start API (Gunicorn, factory, background)
        env:
          PORT: ${{ env.PORT }}
          MODEL_PATH: ${{ env.MODEL_PATH }}
        run: |
          gunicorn 'src.app:create_app()' -w 2 -b 127.0.0.1:${PORT} > api.log 2>&1 &
          echo $! > app.pid
          for i in $(seq 1 30); do
            if curl -fsS "http://127.0.0.1:${PORT}/health" >/dev/null 2>&1; then
              echo "✅ API healthy en intento $i"
              break
            fi
            echo "⏳ Esperando API... (intento $i)"
            sleep 2
            if [ "$i" -eq 30 ]; then
              echo "❌ La API no alcanzó estado healthy a tiempo."
              echo "=== api.log (últimas 200 líneas) ==="
              tail -n 200 api.log || true
              exit 1
            fi
          done

      - name: Smoke tests
        run: |
          set -e
          curl -f "http://127.0.0.1:${{ env.PORT }}/health"
          cat > sample_test.json << 'EOF'
          {
            "features": [17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,
                         1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,
                         25.38,17.33,184.6,2019.0,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189]
          }
          EOF
          curl -f -X POST "http://127.0.0.1:${{ env.PORT }}/predict" \
               -H "Content-Type: application/json" \
               --data @sample_test.json

      - name: Mostrar logs de la API
        if: always()
        run: |
          echo "=== api.log (últimas 150 líneas) ==="
          tail -n 150 api.log || true

      - name: Detener API
        if: always()
        run: |
          [ -f app.pid ] && kill "$(cat app.pid)" 2>/dev/null || true

  deploy-azure:
    name: Deploy — Azure Container Apps
    needs: [ build-and-test ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      # Environment EXISTENTE (ya creado): NO lo registres ni crees aquí
      RG_ENV: rg-evalmod-aca2
      ENV_NAME: env-evalmod2
      LOCATION: eastus

      # App (puede estar en otro RG)
      RG_APP: rg-evalmod-aca2
      APP: evalmod-api2

      # Imagen y config
      IMAGE: em-api
      TAG: ${{ github.sha }}
      PORT: 5002
      MODEL_PATH: modelo_breast.pkl

      # Registry (desde Secrets)
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    steps:
      - name: Preflight secrets
        env:
          S_AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          S_ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          S_ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          S_ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        run: |
          missing=0
          for v in S_AZURE_CREDENTIALS S_ACR_LOGIN_SERVER S_ACR_USERNAME S_ACR_PASSWORD; do
            if [ -z "${!v}" ]; then echo "❌ Falta secret: ${v#S_}"; missing=1; fi
          done
          [ "$missing" -eq 1 ] && { echo "Aborto: faltan secrets."; exit 1; }
          echo "✅ Secrets presentes"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Container Apps CLI & check providers (no register)
        run: |
          az extension add --name containerapp --upgrade
          for NS in Microsoft.App Microsoft.OperationalInsights; do
            STATE=$(az provider show --namespace $NS --query registrationState -o tsv || echo "Unknown")
            echo "$NS: $STATE"
            if [ "$STATE" != "Registered" ]; then
              echo "❌ Provider $NS no está 'Registered'. Regístralo 1 vez con tu usuario:"
              echo "   az provider register --namespace $NS"
              exit 1
            fi
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR
        run: |
          echo "$ACR_PASSWORD" | docker login "$ACR_LOGIN_SERVER" -u "$ACR_USERNAME" --password-stdin
          docker build -f docker/Dockerfile -t "${ACR_LOGIN_SERVER}/${IMAGE}:${TAG}" .
          docker push "${ACR_LOGIN_SERVER}/${IMAGE}:${TAG}"

      - name: Deploy to Azure Container Apps (reusar ENV existente)
        shell: bash
        run: |
          set -e
          # Verificación mínima - solo log
          echo "Usando environment: $ENV_NAME en resource group: $RG_ENV"
          IMAGE_URI="${ACR_LOGIN_SERVER}/${IMAGE}:${TAG}"

          echo "Imagen: $IMAGE_URI"

          if az containerapp show -g "$RG_APP" -n "$APP" >/dev/null 2>&1; then
            echo "🔁 Actualizando app $APP en RG $RG_APP"
            # setear credenciales de registry para UPDATE
            az containerapp registry set \
              -g "$RG_APP" -n "$APP" \
              --server "$ACR_LOGIN_SERVER" \
              --username "$ACR_USERNAME" \
              --password "$ACR_PASSWORD"
            az containerapp update \
              -g "$RG_APP" -n "$APP" \
              --image "$IMAGE_URI" \
              --set-env-vars PORT="$PORT" MODEL_PATH="$MODEL_PATH"
          else
            echo "🆕 Creando app $APP en RG $RG_APP"
            az containerapp create \
              -g "$RG_APP" -n "$APP" \
              --environment "$ENV_NAME" \
              --image "$IMAGE_URI" \
              --target-port "$PORT" \
              --ingress external \
              --env-vars PORT="$PORT" MODEL_PATH="$MODEL_PATH" \
              --registry-server "$ACR_LOGIN_SERVER" \
              --registry-username "$ACR_USERNAME" \
              --registry-password "$ACR_PASSWORD"
          fi

      - name: Mostrar URL pública
        run: |
          FQDN=$(az containerapp show -g "${{ env.RG_APP }}" -n "${{ env.APP }}" --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "no-disponible")
          echo "🌐 URL pública: https://${FQDN}"




