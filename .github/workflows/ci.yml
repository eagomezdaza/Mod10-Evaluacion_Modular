name: Evaluacion Modular CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "tests/**"
      - "docker/**"
      - "Makefile"
      - "requirements.txt"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PORT: 5000
      MODEL_PATH: src/model/modelo_breast.pkl
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train model
        run: |
          python src/train_breast_cancer.py

      - name: Start API (Gunicorn, factory, background)
        run: |
          gunicorn 'src.app:create_app()' -w 2 -b 127.0.0.1:${{ env.PORT }} > api.log 2>&1 &
          echo $! > app.pid
          for i in $(seq 1 30); do
            if curl -fsS "http://127.0.0.1:${{ env.PORT }}/health" >/dev/null 2>&1; then
              echo "‚úÖ API healthy en intento $i"
              break
            fi
            echo "‚è≥ Esperando API... (intento $i)"
            sleep 2
            if [ "$i" -eq 30 ]; then
              echo "‚ùå La API no alcanz√≥ estado healthy a tiempo."
              echo "=== api.log (√∫ltimas 200 l√≠neas) ==="
              tail -n 200 api.log || true
              exit 1
            fi
          done

      - name: Smoke tests
        run: |
          set -e
          curl -f "http://127.0.0.1:${{ env.PORT }}/health"
          cat > sample_test.json << 'EOF'
          {
            "features": [17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,
                         1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,
                         25.38,17.33,184.6,2019.0,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189]
          }
          EOF
          curl -f -X POST "http://127.0.0.1:${{ env.PORT }}/predict" \
               -H "Content-Type: application/json" \
               --data @sample_test.json

      - name: Mostrar logs de la API
        if: always()
        run: |
          echo "=== api.log (√∫ltimas 150 l√≠neas) ==="
          tail -n 150 api.log || true

      - name: Detener API
        if: always()
        run: |
          [ -f app.pid ] && kill "$(cat app.pid)" 2>/dev/null || true
          sleep 2
          # Asegurar que el proceso se cerr√≥
          [ -f app.pid ] && (kill -0 "$(cat app.pid)" 2>/dev/null && kill -9 "$(cat app.pid)" || true) || true

  deploy-azure:
    name: Deploy ‚Äî Azure Container Apps
    needs: [ build-and-test ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      RG_ENV: rg-evalmod-aca2
      ENV_NAME: env-evalmod2
      LOCATION: eastus
      RG_APP: rg-evalmod
      APP: evalmod-api
      IMAGE: em-api
      TAG: ${{ github.sha }}
      PORT: 5000
      MODEL_PATH: src/model/modelo_breast.pkl
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    steps:
      - name: Preflight secrets
        run: |
          missing=0
          for secret in AZURE_CREDENTIALS ACR_LOGIN_SERVER ACR_USERNAME ACR_PASSWORD; do
            if [ -z "${!secret:-}" ]; then 
              echo "‚ùå Falta secret: $secret"
              missing=1
            fi
          done
          [ "$missing" -eq 1 ] && exit 1
          echo "‚úÖ Todos los secrets est√°n presentes"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Container Apps CLI
        run: |
          az extension add --name containerapp --upgrade

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR
        run: |
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "$ACR_PASSWORD" | docker login "$ACR_LOGIN_SERVER" -u "$ACR_USERNAME" --password-stdin
          docker build -f docker/Dockerfile -t "$ACR_LOGIN_SERVER/$IMAGE:$TAG" .
          docker push "$ACR_LOGIN_SERVER/$IMAGE:$TAG"

      - name: Verificar script de deploy
        run: |
          ls -la scripts/
          bash -n scripts/deploy_azure.sh && echo "‚úÖ Sintaxis del script OK"

      - name: Deploy to Azure Container Apps
        run: bash scripts/deploy_azure.sh
        env:
          SKIP_BUILD: "1"  # Porque ya hicimos build en el paso anterior

      - name: Mostrar URL p√∫blica
        run: |
          FQDN=$(az containerapp show -g "$RG_APP" -n "$APP" --query properties.configuration.ingress.fqdn -o tsv)
          echo "üåê URL p√∫blica: https://$FQDN"


