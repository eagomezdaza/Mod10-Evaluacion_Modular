# ============================================================================
# github-actions.yml — CI para Evaluación Modular
# Autor: John Gómez
# Fecha: 2025-09-25
# Descripción:
#   CI mínimo y estable:
#   - Instala dependencias
#   - Entrena modelo y verifica que exista
#   - Exporta MODEL_PATH
#   - Levanta API (Gunicorn) con espera por /health
#   - Ejecuta tests contra la API
#   - Muestra logs y detiene la API
# ============================================================================

name: Evaluacion Modular CI

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "tests/**"
      - "docker/**"
      - "Makefile"
      - "requirements.txt"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PORT: 5000
      PYTHONPATH: ${{ github.workspace }}
      MODEL_PATH: src/model/modelo_breast.pkl

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -V

      - name: Train model
        run: |
          python src/train_breast_cancer.py

      - name: Ensure model exists and import app
        run: |
          ls -lah src/model || true
          test -f "$MODEL_PATH" || (echo "Falta modelo; re-entrenando..." && python src/train_breast_cancer.py)
          python - <<'PY'
import os,sys
p=os.environ.get("MODEL_PATH","src/model/modelo_breast.pkl")
print("MODEL_PATH:", p)
import pathlib
print("MODEL EXISTS:", pathlib.Path(p).exists(), "SIZE:", pathlib.Path(p).stat().st_size if pathlib.Path(p).exists() else -1)
try:
    import src.app
    print("import src.app OK")
except Exception as e:
    print("import src.app FAILED:", e)
    sys.exit(1)
PY

      - name: Start API (Gunicorn, background) and wait /health
        run: |
          set -e
          echo "PYTHONPATH=$PYTHONPATH"
          echo "MODEL_PATH=$MODEL_PATH"
          python -m gunicorn -w 2 -b 127.0.0.1:${PORT} src.app:app > api.log 2>&1 &
          echo $! > app.pid
          for i in $(seq 1 60); do
            if curl -fsS "http://127.0.0.1:${PORT}/health" >/dev/null 2>&1; then
              echo "API healthy en intento $i"
              exit 0
            fi
            if [ $((i % 5)) -eq 0 ]; then echo "--- api.log (tail) ---"; tail -n 30 api.log || true; fi
            sleep 2
          done
          echo "La API no alcanzó estado healthy."
          echo "=== api.log (últimas 200 líneas) ==="; tail -n 200 api.log || true
          exit 1

      - name: Run tests (test_predict.py contra la URL)
        run: |
          set -e
          python tests/test_predict.py --base-url "http://127.0.0.1:${PORT}"

      - name: Mostrar logs de la API
        if: always()
        run: |
          echo "=== api.log (últimas 200 líneas) ==="
          tail -n 200 api.log || true

      - name: Detener API
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill "$(cat app.pid)" || true
            sleep 1
          fi
